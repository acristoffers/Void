// Generated by CoffeeScript 1.10.0

/*
 * Copyright (c) 2015 Álan Crístoffer
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the 'Software'), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

(function() {
  var ace_themes, basename, current_image, decrypt_entries, deselect, editor, editor_mode_bindings, folderTree, humanFileSize, isElementInViewport, is_text, make_dir_entry, make_file_entry, navigate_up, open_file_path, open_image_view, open_text_view, open_video_view, path, path_tree_node, reset_click_listener, sb, select, set_path, set_shortcuts, set_zoom, store, supported_languages, time, toast, toast_hide, tree_opts, update_tree, update_tree_flat_struct, update_views, wcp, zoom_factor;

  if (!Array.prototype.last) {
    Array.prototype.last = function() {
      return this[this.length - 1];
    };
  }

  if (!Array.prototype.first) {
    Array.prototype.first = function() {
      return this[0];
    };
  }

  sb = null;

  store = null;

  path = '';

  path_tree_node = {};

  editor = null;

  supported_languages = ['abap', 'abc', 'actionscript', 'ada', 'apache', 'applescript', 'asciidoc', 'assembler', 'assembly', 'autohotkey', 'batchfile', 'c9search', 'c_cpp', 'cirru', 'clojure', 'cobol', 'coffee', 'coldfusion', 'conf', 'csharp', 'css', 'curly', 'dart', 'diff', 'django', 'dockerfile', 'dot', 'eiffel', 'elixir', 'r', 'io', 'elixir', 'elm', 'erlang', 'forth', 'fortran', 'ftl', 'gcode', 'gherkin', 'gitignore', 'glsl', 'gobstones', 'golang', 'groovy', 'haml', 'handlebars', 'haskell', 'haxe', 'html', 'html', 'html', 'ini', 'jack', 'jade', 'java', 'javascript', 'julia', 'latex', 'lean', 'less', 'liquid', 'lisp', 'live', 'livescript', 'log', 'logiql', 'lsl', 'lua', 'luapage', 'lucene', 'makefile', 'markdown', 'mask', 'mate', 'matlab', 'mavens', 'maze', 'mel', 'mips', 'mipsassembler', 'modeon', 'modeoniq', 'modep', 'modex', 'mushcode', 'mysql', 'nix', 'nsis', 'objectivec', 'ocaml', 'pascal', 'perl', 'pgsql', 'php', 'plain', 'powershell', 'praat', 'prolog', 'properties', 'protobuf', 'python', 'razor', 'rdoc', 'rhtml', 'rst', 'ruby', 'rust', 'sass', 'scad', 'scala', 'scheme', 'script', 'scss', 'sh', 'smarty', 'snippets', 'soy', 'space', 'sql', 'sqlserver', 'stylus', 'svg', 'swift', 'swig', 'tcl', 'template', 'tex', 'text', 'textile', 'toml', 'twig', 'typescript', 'vala', 'vbscript', 'velocity', 'verilog', 'vhdl', 'wollok', 'x86', 'xml', 'xquery', 'yaml'];

  ace_themes = ['ambiance', 'chaos', 'chrome', 'clouds', 'clouds_midnight', 'cobalt', 'crimson_editor', 'dawn', 'dreamweaver', 'eclipse', 'github', 'idle_fingers', 'iplastic', 'katzenmilch', 'kr_theme', 'kuroir', 'merbivore', 'merbivore_soft', 'mono_industrial', 'monokai', 'pastel_on_dark', 'solarized_dark', 'solarized_light', 'sqlserver', 'terminal', 'textmate', 'tomorrow', 'tomorrow_night', 'tomorrow_night_blue', 'tomorrow_night_bright', 'tomorrow_night_eighties', 'twilight', 'vibrant_ink', 'xcode'];

  time = function() {
    return new Date().getTime();
  };

  update_views = function() {
    set_path(path);
    return update_tree();
  };

  is_text = function(mimetype) {
    var f, m, r;
    m = supported_languages.filter(function(e) {
      return e.length > 2;
    });
    m = m.map(function(lang) {
      return {
        lang: lang,
        percent: mimetype.includes(lang) ? lang.length / mimetype.length : 0
      };
    });
    f = function(acc, e) {
      if (e.percent > acc.percent) {
        return e;
      } else {
        return acc;
      }
    };
    r = m.reduce(f);
    if (r.percent > 0) {
      return r.lang;
    } else {
      return null;
    }
  };

  set_path = function(new_path) {
    var composite_path, html, j, len, part, path_parts;
    deselect($('.entry'));
    path = new_path || '';
    path_parts = path.split('/');
    if (path_parts.last() === '') {
      path_parts = [''];
    }
    composite_path = '';
    html = '';
    for (j = 0, len = path_parts.length; j < len; j++) {
      part = path_parts[j];
      composite_path += '/' + part;
      composite_path = composite_path.replace(/\/+/ig, '/');
      if (part === '') {
        part = 'Home';
      }
      html += '<li><a href="#" data-path="' + composite_path + '">' + part + '</a></li>';
    }
    $('#path').html(html);
    $('#path a').click(function() {
      return set_path($(this).attr('data-path'));
    });
    store.listSubdirectories(path, function(ds) {
      return store.listFiles(path, function(fs) {
        $('#entries').html('');
        ds = ds.map(function(d) {
          return make_dir_entry(d);
        });
        fs = fs.map(function(f) {
          return make_file_entry(f);
        });
        $('#entries').append(ds.join('') + '<br>' + fs.join(''));
        $('.entry[data-type=file]').each(function() {
          var entry, entry_path;
          entry = $(this);
          entry_path = entry.attr('data-path');
          return store.fileMetadata(entry_path, 'mimetype', function(mimetype) {
            var icon;
            icon = 'insert_drive_file';
            if (mimetype.startsWith('video')) {
              icon = 'local_movies';
            } else if (mimetype.startsWith('audio')) {
              icon = 'library_music';
            } else if (is_text(mimetype)) {
              icon = 'mode_edit';
            }
            if (mimetype.startsWith('image')) {
              entry.find('i').replaceWith('<img class="icon" src="thumb://' + entry.attr('data-path') + '">');
            } else {
              entry.find('i').html(icon);
            }
            entry.attr('data-mimetype', mimetype);
            if (mimetype.startsWith('image')) {
              entry.attr('data-filetype', 'image');
            } else if (is_text(mimetype)) {
              entry.attr('data-filetype', 'text');
            } else {
              entry.attr('data-filetype', mimetype.split('/').first());
            }
            return reset_click_listener();
          });
        });
        return reset_click_listener();
      });
    });
    return $('#left-panel').treeview(true).selectNode(path_tree_node[path]);
  };

  humanFileSize = function(size) {
    var i;
    if (size === 0) {
      return '0 bytes';
    }
    i = Math.floor(Math.log(size) / Math.log(1024));
    return (size / Math.pow(1024, i)).toFixed(2) * 1 + ' ' + ['B', 'kB', 'MB', 'GB', 'TB'][i];
  };

  select = function(node) {
    var entry, j, len, ref, results, selection_size;
    node = $(node);
    node.removeClass('btn-default');
    node.addClass('btn-info');
    node.attr('data-selected', true);
    $('#file-decrypt').removeClass('hidden');
    $('#selection-size').removeClass('hidden');
    selection_size = 0;
    ref = $('.entry[data-selected=true]');
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      entry = ref[j];
      results.push(store.fileSize($(entry).attr('data-path'), function(size) {
        selection_size += size;
        return $('#selection-size').html(humanFileSize(selection_size));
      }));
    }
    return results;
  };

  deselect = function(node) {
    var entry, j, len, ref, results, selection_size;
    node = $(node);
    node.removeClass('btn-info');
    node.addClass('btn-default');
    node.attr('data-selected', false);
    if ($('.entry[data-selected=true]').size() === 0) {
      $('#file-decrypt').addClass('hidden');
      $('#selection-size').addClass('hidden');
    }
    selection_size = 0;
    ref = $('.entry[data-selected=true]');
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      entry = ref[j];
      results.push(store.fileSize($(entry).attr('data-path'), function(size) {
        selection_size += size;
        return $('#selection-size').html(humanFileSize(selection_size));
      }));
    }
    return results;
  };

  reset_click_listener = function() {
    $('.entry').unbind('dblclick');
    $('.entry').unbind('click');
    $('.entry[data-type=folder]').dblclick(function() {
      return set_path($(this).attr('data-path'));
    });
    $('.entry[data-filetype=image]').dblclick(open_image_view);
    $('.entry[data-filetype=text]').dblclick(open_text_view);
    $('.entry[data-filetype=video]').dblclick(open_video_view);
    return $('.entry').click(function(e) {
      var entries, first, last, self, self_index, target_index;
      self = $(this);
      if (e.ctrlKey || e.metaKey) {
        if (self.attr('data-selected') === "true") {
          return deselect(self);
        } else {
          return select(self);
        }
      } else if (e.shiftKey) {
        entries = $('.entry');
        self_index = entries.index(self);
        target_index = entries.index($('.entry[data-selected=true]').first());
        first = self_index < target_index ? self_index : target_index;
        last = self_index > target_index ? self_index : target_index;
        if (first === -1 || last === -1) {
          select(self);
          return;
        }
        entries = entries.slice(first, last + 1);
        return select($(entries));
      } else {
        deselect($('.entry'));
        if (self.attr('data-selected') === "true") {
          return deselect(self);
        } else {
          return select(self);
        }
      }
    });
  };

  folderTree = function(_path) {
    var node, node_name;
    node_name = _path.split('/').last();
    if (node_name === '') {
      node_name = 'Home';
    }
    node = {
      text: node_name,
      path: _path,
      href: '#',
      state: {
        selected: _path === path
      },
      nodes: []
    };
    store.listSubdirectories(_path, function(res) {
      node.nodes = res.map(folderTree);
      $('#left-panel').treeview(tree_opts);
      return update_tree_flat_struct();
    });
    return node;
  };

  tree_opts = {
    data: [],
    color: 'white',
    nodeIcon: 'glyphicon glyphicon-folder-open',
    selectedIcon: 'glyphicon glyphicon-folder-open',
    color: 'white',
    onhoverColor: 'transparent',
    backColor: 'transparent',
    selectedBackColor: 'transparent',
    searchResultBackColor: 'transparent',
    selectedColor: '#009688',
    showBorder: false,
    onNodeUnselected: function(event, node) {
      if ($('#left-panel').treeview(true).getSelected().length === 0) {
        return setTimeout(function() {
          if ($('#left-panel').treeview(true).getSelected().length === 0) {
            return $('#left-panel').treeview(true).selectNode(node.nodeId);
          }
        }, 50);
      }
    },
    onNodeSelected: function(event, node) {
      return set_path(node.path);
    }
  };

  update_tree = function() {
    tree_opts.data = [folderTree('/')];
    return $('#left-panel').treeview(tree_opts);
  };

  update_tree_flat_struct = function() {
    var counter;
    path_tree_node = {};
    counter = 0;
    return store.listAllDirectories(function(res) {
      return $(res).each(function() {
        var node;
        node = $('#left-panel').treeview(true).getNode(counter);
        path_tree_node[node.path] = node;
        return counter++;
      });
    });
  };

  make_dir_entry = function(path) {
    var name;
    name = path.split('/').last();
    name = $('#hidden-div').text(name).html();
    return '<div class="entry btn btn-default btn-raised" data-type="folder" data-path="' + path + '"><i class="icon material-icons">folder</i><span class="name">' + name + '</span></div>';
  };

  make_file_entry = function(path) {
    var name;
    name = path.split('/').last();
    name = $('#hidden-div').text(name).html();
    return '<div class="entry btn btn-default btn-raised" data-type="file" data-path="' + path + '"><i class="icon material-icons"></i><span class="name">' + name + '</span></div>';
  };

  basename = function(path) {
    return path.split('/').last();
  };

  toast_hide = time();

  setInterval((function() {
    if (time() > toast_hide) {
      return $('#toast').hide();
    }
  }), 5000);

  toast = function(msg) {
    $('#toast').html(msg);
    $('#toast').show();
    return toast_hide = time() + 5000;
  };

  isElementInViewport = function(el) {
    var rect;
    if (typeof jQuery === "function" && el instanceof jQuery) {
      el = el[0];
    }
    rect = el.getBoundingClientRect();
    return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || $(window).height()) && rect.right <= (window.innerWidth || $(window).width());
  };

  navigate_up = function() {
    var parent;
    parent = path.split('/').slice(0, -1).join('/') || '/';
    return set_path(parent);
  };

  zoom_factor = 1;

  current_image = null;

  open_image_view = function() {
    var image_entry;
    image_entry = $($('.entry[data-selected=true]').filter('[data-filetype=image]').first() || $('[data-filetype=image]').first());
    if (image_entry == null) {
      return;
    }
    $('#image-view #image').attr('src', 'decrypt://' + image_entry.attr('data-path'));
    $('#image-view').show();
    return current_image = image_entry;
  };

  set_zoom = function(zoom) {
    var ch, cw, height, width;
    width = Math.ceil($('#image-view #image').get(0).naturalWidth);
    height = Math.ceil($('#image-view #image').get(0).naturalHeight);
    if (zoom > 0 && zoom <= 5) {
      zoom_factor = zoom;
    } else {
      zoom_factor = -1;
      cw = $('#image-view #image-container').width();
      ch = $('#image-view #image-container').height();
      zoom = Math.min(cw / width, ch / height);
    }
    width *= zoom;
    height *= zoom;
    $('#image-view #image').css('width', width + 'px');
    return $('#image-view #image').css('height', height + 'px');
  };

  open_file_path = null;

  open_text_view = function() {
    var entry, type;
    entry = $($('.entry[data-selected=true]').filter('[data-filetype=text]').first() || $('[data-filetype=text]').first());
    $('#text-editor-container').show();
    type = is_text(entry.attr('data-mimetype'));
    editor.getSession().setMode('ace/mode/' + type);
    $('#editor-lang').val(type);
    open_file_path = entry.attr('data-path');
    store.decryptFile(entry.attr('data-path'), function(content) {
      editor.setValue(content);
      editor.clearSelection();
      editor.gotoLine(1, 0, true);
      return editor.focus();
    });
    return editor_mode_bindings();
  };

  open_video_view = function() {
    var entry;
    entry = $($('.entry[data-selected=true]').filter('[data-filetype=video]').first() || $('[data-filetype=video]').first());
    path = entry.attr('data-path');
    return sb.playVideo(path);
  };

  decrypt_entries = function() {
    var entries, paths;
    entries = $('.entry[data-selected=true]');
    paths = entries.map(function() {
      return $(this).attr('data-path');
    });
    return sb.decrypt(paths.get(), path);
  };

  set_shortcuts = function() {
    var right_panel_shown, right_panel_width, view;
    $(document).unbind('keydown');
    $('#file-decrypt').click(decrypt_entries);
    right_panel_shown = true;
    right_panel_width = $('#right-panel').css('width');
    view = 'grid';
    $('#grid-toggle').click(function() {
      if (view === 'grid') {
        $('#grid-toggle i').html('view_module');
        $('#entries').removeClass('grid-view');
        $('#entries').addClass('list-view');
        return view = 'list';
      } else {
        $('#grid-toggle i').html('view_list');
        $('#entries').addClass('grid-view');
        $('#entries').removeClass('list-view');
        return view = 'grid';
      }
    });
    $('#add-file').click(function() {
      $('#add-modal').modal('hide');
      return sb.getFile(function(fs) {
        var f, file_name, j, len, results, target_path;
        results = [];
        for (j = 0, len = fs.length; j < len; j++) {
          f = fs[j];
          file_name = basename(f);
          target_path = path + '/' + file_name;
          target_path = target_path.replace(/\/+/ig, '/');
          results.push(sb.asyncAddFile(f, target_path, function() {
            return setTimeout(update_views, 1000);
          }));
        }
        return results;
      });
    });
    $('#add-folder').click(function() {
      $('#add-modal').modal('hide');
      return sb.getFolder(function(folder) {
        var folder_name, target_folder;
        folder_name = basename(folder);
        target_folder = path + '/' + folder_name;
        target_folder = target_folder.replace(/\/+/ig, '/');
        return sb.listFilesInFolder(folder, function(fs) {
          var f, file_store_path, j, len, results;
          results = [];
          for (j = 0, len = fs.length; j < len; j++) {
            f = fs[j];
            file_store_path = f.replace(folder, target_folder).replace(/\/+/ig, '/');
            results.push(sb.asyncAddFile(f, file_store_path, function() {
              return setTimeout(update_views, 1000);
            }));
          }
          return results;
        });
      });
    });
    $('#remove-selected').click(function() {
      var entry, entry_path, j, len, ref, results;
      $('#remove-modal').modal('hide');
      ref = $('.entry[data-selected=true]');
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        entry = ref[j];
        entry_path = $(entry).attr('data-path');
        results.push(store.remove(entry_path, function() {
          toast(entry_path + ' removed');
          return setTimeout(update_views, 1000);
        }));
      }
      return results;
    });
    $('#zoom-fit').click(function() {
      return set_zoom(-1);
    });
    $('#zoom-original').click(function() {
      return set_zoom(1);
    });
    $('#zoom-in').click(function() {
      return set_zoom(zoom_factor + 0.05);
    });
    $('#zoom-out').click(function() {
      return set_zoom(zoom_factor - 0.05);
    });
    $('#image-view #next').click(function() {
      var images, index;
      images = $('.entry[data-filetype=image]');
      index = (((images.index(current_image) + 1) % images.size()) + images.size()) % images.size();
      $('#image-view #image').attr('src', 'decrypt://' + $(images[index]).attr('data-path'));
      return current_image = $(images[index]);
    });
    $('#image-view #prev').click(function() {
      var images, index;
      images = $('.entry[data-filetype=image]');
      index = (((images.index(current_image) - 1) % images.size()) + images.size()) % images.size();
      $('#image-view #image').attr('src', 'decrypt://' + $(images[index]).attr('data-path'));
      return current_image = $(images[index]);
    });
    $('#image-view #image').load(function() {
      return set_zoom(zoom_factor);
    });
    $('#text-editor-save').click(function() {
      var content;
      content = editor.getValue();
      return store.remove(open_file_path, function() {
        return store.addFileFromData(open_file_path, content, function() {
          return toast(window.tr('FileSaved'));
        });
      });
    });
    $(document).bind('keydown', 'ctrl+0', function() {
      return $('#zoom-original').click();
    });
    $(document).bind('keydown', 'ctrl+9', function() {
      return $('#zoom-fit').click();
    });
    $(document).bind('keydown', 'ctrl++', function() {
      return $('#zoom-in').click();
    });
    $(document).bind('keydown', 'ctrl+=', function() {
      return $('#zoom-in').click();
    });
    $(document).bind('keydown', 'ctrl+-', function() {
      return $('#zoom-out').click();
    });
    $(document).bind('keydown', 'meta+0', function() {
      return $('#zoom-original').click();
    });
    $(document).bind('keydown', 'meta+9', function() {
      return $('#zoom-fit').click();
    });
    $(document).bind('keydown', 'meta++', function() {
      return $('#zoom-in').click();
    });
    $(document).bind('keydown', 'meta+=', function() {
      return $('#zoom-in').click();
    });
    $(document).bind('keydown', 'meta+-', function() {
      return $('#zoom-out').click();
    });
    $(document).bind('keydown', 'ctrl+a', function() {
      return deselect($('.entry'));
    });
    $(document).bind('keydown', 'meta+a', function() {
      return select($('.entry'));
    });
    $(document).bind('keydown', 'ctrl+d', decrypt_entries);
    $(document).bind('keydown', 'meta+d', decrypt_entries);
    return $(document).keydown(function(e) {
      var elements_per_row, entries, first_selected, index, ref;
      switch (e.keyCode) {
        case 46:
          return $('#remove-modal').modal('show');
        case 8:
          return navigate_up();
        case 27:
          current_image = null;
          open_file_path = null;
          $('#text-editor-container').hide();
          $('#image-view').hide();
          $('#video-container').hide();
          $('.modal').modal('hide');
          return deselect($('.entry'));
        case 13:
          return (ref = $('.entry[data-selected=true]').first()) != null ? ref.dblclick() : void 0;
        case 37:
          if (current_image != null) {
            $('#image-view #prev').click();
            return;
          }
          entries = $('.entry');
          first_selected = $('.entry[data-selected=true]').first() || entries.first();
          index = (((entries.index(first_selected) - 1) % entries.size()) + entries.size()) % entries.size();
          deselect(entries);
          select(entries.get(index));
          if (!isElementInViewport(entries.get(index))) {
            $('.entry[data-selected=true]').get(0).scrollIntoView();
            $('#content').scrollTop($('#content').scrollTop() - 90);
            if (!isElementInViewport(entries.get(index))) {
              return $('.entry[data-selected=true]').get(0).scrollIntoView();
            }
          }
          break;
        case 38:
          entries = $('.entry');
          first_selected = $('.entry[data-selected=true]').first() || entries.first();
          e = $(entries.first());
          elements_per_row = Math.floor($('#entries').width() / (e.outerWidth() + e.innerWidth() - e.width()));
          elements_per_row = elements_per_row || 1;
          index = (((entries.index(first_selected) - elements_per_row) % entries.size()) + entries.size()) % entries.size();
          deselect(entries);
          select(entries.get(index));
          if (!isElementInViewport(entries.get(index))) {
            $('.entry[data-selected=true]').get(0).scrollIntoView();
            $('#content').scrollTop($('#content').scrollTop() - 90);
            if (!isElementInViewport(entries.get(index))) {
              return $('.entry[data-selected=true]').get(0).scrollIntoView();
            }
          }
          break;
        case 39:
          if (current_image != null) {
            $('#image-view #next').click();
            return;
          }
          entries = $('.entry');
          first_selected = $('.entry[data-selected=true]').first();
          index = (((entries.index(first_selected) + 1) % entries.size()) + entries.size()) % entries.size();
          deselect(entries);
          select(entries.get(index));
          if (!isElementInViewport(entries.get(index))) {
            $('.entry[data-selected=true]').get(0).scrollIntoView();
            $('#content').scrollTop($('#content').scrollTop() - 90);
            if (!isElementInViewport(entries.get(index))) {
              return $('.entry[data-selected=true]').get(0).scrollIntoView();
            }
          }
          break;
        case 40:
          entries = $('.entry');
          first_selected = $('.entry[data-selected=true]').first() || entries.first();
          e = $(entries.first());
          elements_per_row = Math.floor($('#entries').width() / (e.outerWidth() + e.innerWidth() - e.width()));
          elements_per_row = elements_per_row || 1;
          index = (((entries.index(first_selected) + elements_per_row) % entries.size()) + entries.size()) % entries.size();
          deselect(entries);
          select(entries.get(index));
          if (!isElementInViewport(entries.get(index))) {
            $('.entry[data-selected=true]').get(0).scrollIntoView();
            $('#content').scrollTop($('#content').scrollTop() - 90);
            if (!isElementInViewport(entries.get(index))) {
              return $('.entry[data-selected=true]').get(0).scrollIntoView();
            }
          }
      }
    });
  };

  editor_mode_bindings = function() {
    $(document).unbind('keydown');
    return $(document).keydown(function(e) {
      if (e.keyCode === 27) {
        current_image = null;
        open_file_path = null;
        $('#text-editor-container').hide();
        $('#image-view').hide();
        $('.modal').modal('hide');
        deselect($('.entry'));
        return set_shortcuts();
      }
    });
  };

  $(function() {
    var j, k, lang, len, len1, theme;
    $.material.init();
    $('#toast').hide();
    $('#image-view').hide();
    $('#text-editor-container').hide();
    $('#video-container').hide();
    editor = ace.edit('text-editor');
    editor.setTheme('ace/theme/ambiance');
    for (j = 0, len = supported_languages.length; j < len; j++) {
      lang = supported_languages[j];
      $('#editor-lang').append('<option>' + lang + '</option>');
    }
    $('#editor-lang').change(function() {
      return editor.getSession().setMode('ace/mode/' + $(this).val());
    });
    for (k = 0, len1 = ace_themes.length; k < len1; k++) {
      theme = ace_themes[k];
      $('#editor-theme').append('<option>' + theme + '</option>');
    }
    $('#editor-theme').change(function() {
      editor.setTheme('ace/theme/' + $(this).val());
      return sb.saveSetting('ace-theme', $(this).val());
    });
    set_shortcuts();
    wcp.done(function() {
      $(window.trs).each(function() {
        var locale;
        locale = this;
        return $('#' + locale).click(function() {
          window.locale = locale;
          window.update_translation();
          return sb.setLang(locale);
        });
      });
      sb.lang(function(r) {
        window.locale = r;
        return window.update_translation();
      });
      sb.startAddFile.connect(function(fsPath, storePath) {
        return toast(window.tr('Adding') + ' ' + storePath);
      });
      sb.endAddFile.connect(function(fsPath, storePath) {
        toast(window.tr('Added') + ' ' + storePath);
        update_tree();
        return set_path('/');
      });
      sb.startDecryptFile.connect(function(path) {
        return toast(window.tr('Decrypting') + ' ' + path);
      });
      sb.startDecryptFile.connect(function(path) {
        return toast(window.tr('Decrypted') + ' ' + path);
      });
      sb.setting('ace-theme', function(theme) {
        if (theme) {
          editor.setTheme('ace/theme/' + theme);
          return $('#editor-theme').val(theme);
        }
      });
      update_tree();
      return set_path('/');
    });
    return $(window).on({
      dragover: function() {
        return false;
      },
      dragend: function() {
        return false;
      },
      drop: function() {
        return false;
      }
    });
  });

  wcp = (function() {
    var deferred;
    deferred = new $.Deferred;
    new QWebChannel(qt.webChannelTransport, function(channel) {
      sb = channel.objects.store_bridge;
      store = channel.objects.store;
      return deferred.resolve();
    });
    return deferred.promise();
  })();

}).call(this);
